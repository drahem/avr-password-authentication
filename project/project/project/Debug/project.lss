
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000430  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00000ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c34  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a8  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000129b  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000227  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d3  00000000  00000000  00003503  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000221e8  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00025bbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e0       	ldi	r26, 0x0E	; 14
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	e0 d0       	rcall	.+448    	; 0x248 <main>
  88:	d1 c1       	rjmp	.+930    	; 0x42c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <keypad_init>:
 */ 
#include "keypad.h"
#include "SevenSeg.h"
void keypad_init()
{
	CLR_LOWER_NIBBLE(DDRD);
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	80 7f       	andi	r24, 0xF0	; 240
  90:	81 bb       	out	0x11, r24	; 17
	SET_HIGH_NIBBLE(DDRD); 
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	81 bb       	out	0x11, r24	; 17
	SET_REG_NIBBLE(KEYPAD_PORT);
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	82 bb       	out	0x12, r24	; 18
}
  9e:	08 95       	ret

000000a0 <KeyPad_getpressedkey>:

unsigned char KeyPad_getpressedkey(void)
{
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;

	for(col_index=0;col_index<4;col_index++)
  a4:	60 e0       	ldi	r22, 0x00	; 0
	{
		CLR_BIT(KEYPAD_PORT,(col_index+4));
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	72 b3       	in	r23, 0x12	; 18
  ac:	9a 01       	movw	r18, r20
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <KeyPad_getpressedkey+0x16>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <KeyPad_getpressedkey+0x12>
  ba:	e2 2f       	mov	r30, r18
  bc:	e0 95       	com	r30
  be:	7e 23       	and	r23, r30
  c0:	72 bb       	out	0x12, r23	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <KeyPad_getpressedkey+0x26>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <KeyPad_getpressedkey+0x2c>
  cc:	00 00       	nop

		_delay_ms(1);

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS);
  ce:	70 b3       	in	r23, 0x10	; 16
  d0:	7f 70       	andi	r23, 0x0F	; 15

		if(rows_val != 0x0F)
  d2:	7f 30       	cpi	r23, 0x0F	; 15
  d4:	29 f0       	breq	.+10     	; 0xe0 <KeyPad_getpressedkey+0x40>
		{
			while((GET_LOWER_NIBBLE(KEYPAD_ROWS)) != 0x0F);
  d6:	80 b3       	in	r24, 0x10	; 16
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8f 30       	cpi	r24, 0x0F	; 15
  dc:	e1 f7       	brne	.-8      	; 0xd6 <KeyPad_getpressedkey+0x36>
  de:	09 c0       	rjmp	.+18     	; 0xf2 <KeyPad_getpressedkey+0x52>
			break;
		}
		SET_BIT(KEYPAD_PORT,(col_index+4));
  e0:	32 b3       	in	r19, 0x12	; 18
  e2:	23 2b       	or	r18, r19
  e4:	22 bb       	out	0x12, r18	; 18
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;

	for(col_index=0;col_index<4;col_index++)
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	64 30       	cpi	r22, 0x04	; 4
  ec:	f1 f6       	brne	.-68     	; 0xaa <KeyPad_getpressedkey+0xa>
		SET_BIT(KEYPAD_PORT,(col_index+4));
	}

	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	08 95       	ret
			break;
		}
		SET_BIT(KEYPAD_PORT,(col_index+4));
	}

	if(col_index == 4)
  f2:	64 30       	cpi	r22, 0x04	; 4
  f4:	09 f4       	brne	.+2      	; 0xf8 <KeyPad_getpressedkey+0x58>
  f6:	57 c0       	rjmp	.+174    	; 0x1a6 <KeyPad_getpressedkey+0x106>
	{
		return NO_PRESSED_KEY;
	}
	else
	{
		switch(col_index)
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	e1 f0       	breq	.+56     	; 0x134 <KeyPad_getpressedkey+0x94>
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	30 f0       	brcs	.+12     	; 0x10c <KeyPad_getpressedkey+0x6c>
 100:	62 30       	cpi	r22, 0x02	; 2
 102:	59 f1       	breq	.+86     	; 0x15a <KeyPad_getpressedkey+0xba>
 104:	63 30       	cpi	r22, 0x03	; 3
 106:	09 f0       	breq	.+2      	; 0x10a <KeyPad_getpressedkey+0x6a>
 108:	50 c0       	rjmp	.+160    	; 0x1aa <KeyPad_getpressedkey+0x10a>
 10a:	3a c0       	rjmp	.+116    	; 0x180 <KeyPad_getpressedkey+0xe0>
		{
			// Col_index = 0
			case 0:
			switch(rows_val)
 10c:	7b 30       	cpi	r23, 0x0B	; 11
 10e:	71 f0       	breq	.+28     	; 0x12c <KeyPad_getpressedkey+0x8c>
 110:	7c 30       	cpi	r23, 0x0C	; 12
 112:	18 f4       	brcc	.+6      	; 0x11a <KeyPad_getpressedkey+0x7a>
 114:	77 30       	cpi	r23, 0x07	; 7
 116:	31 f4       	brne	.+12     	; 0x124 <KeyPad_getpressedkey+0x84>
 118:	0b c0       	rjmp	.+22     	; 0x130 <KeyPad_getpressedkey+0x90>
 11a:	7d 30       	cpi	r23, 0x0D	; 13
 11c:	29 f0       	breq	.+10     	; 0x128 <KeyPad_getpressedkey+0x88>
 11e:	7e 30       	cpi	r23, 0x0E	; 14
 120:	09 f4       	brne	.+2      	; 0x124 <KeyPad_getpressedkey+0x84>
 122:	45 c0       	rjmp	.+138    	; 0x1ae <KeyPad_getpressedkey+0x10e>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	08 95       	ret
			{
				case 0x0E:  
				key = 7;
				break;
				case 0x0D:  
				key = 4;
 128:	84 e0       	ldi	r24, 0x04	; 4
				break;
 12a:	08 95       	ret
				case 0x0B:  
				key = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
				break;
 12e:	08 95       	ret
				case 0x07:   
				key = ON_BUTTON;
 130:	8a e0       	ldi	r24, 0x0A	; 10
				break;
 132:	08 95       	ret
				break;
			}
			break;

			case 1:
			switch(rows_val)
 134:	7b 30       	cpi	r23, 0x0B	; 11
 136:	69 f0       	breq	.+26     	; 0x152 <KeyPad_getpressedkey+0xb2>
 138:	7c 30       	cpi	r23, 0x0C	; 12
 13a:	18 f4       	brcc	.+6      	; 0x142 <KeyPad_getpressedkey+0xa2>
 13c:	77 30       	cpi	r23, 0x07	; 7
 13e:	29 f4       	brne	.+10     	; 0x14a <KeyPad_getpressedkey+0xaa>
 140:	0a c0       	rjmp	.+20     	; 0x156 <KeyPad_getpressedkey+0xb6>
 142:	7d 30       	cpi	r23, 0x0D	; 13
 144:	21 f0       	breq	.+8      	; 0x14e <KeyPad_getpressedkey+0xae>
 146:	7e 30       	cpi	r23, 0x0E	; 14
 148:	a1 f1       	breq	.+104    	; 0x1b2 <KeyPad_getpressedkey+0x112>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	08 95       	ret
			{
				case 0x0E:   
				key = 8;
				break;
				case 0x0D:   
				key = 5;
 14e:	85 e0       	ldi	r24, 0x05	; 5
				break;
 150:	08 95       	ret
				case 0x0B:
				key = 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
				break;
 154:	08 95       	ret
				case 0x07:
				key = 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
				break;
 158:	08 95       	ret
				break;
			}
			break;
			
			case 2:
			switch(rows_val)
 15a:	7b 30       	cpi	r23, 0x0B	; 11
 15c:	69 f0       	breq	.+26     	; 0x178 <KeyPad_getpressedkey+0xd8>
 15e:	7c 30       	cpi	r23, 0x0C	; 12
 160:	18 f4       	brcc	.+6      	; 0x168 <KeyPad_getpressedkey+0xc8>
 162:	77 30       	cpi	r23, 0x07	; 7
 164:	29 f4       	brne	.+10     	; 0x170 <KeyPad_getpressedkey+0xd0>
 166:	0a c0       	rjmp	.+20     	; 0x17c <KeyPad_getpressedkey+0xdc>
 168:	7d 30       	cpi	r23, 0x0D	; 13
 16a:	21 f0       	breq	.+8      	; 0x174 <KeyPad_getpressedkey+0xd4>
 16c:	7e 30       	cpi	r23, 0x0E	; 14
 16e:	19 f1       	breq	.+70     	; 0x1b6 <KeyPad_getpressedkey+0x116>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	08 95       	ret
			{
				case 0x0E:  
				key = 9;
				break;
				case 0x0D:  
				key = 6;
 174:	86 e0       	ldi	r24, 0x06	; 6
				break;
 176:	08 95       	ret
				case 0x0B:  
				key = 3;
 178:	83 e0       	ldi	r24, 0x03	; 3
				break;
 17a:	08 95       	ret
				case 0x07:  
				key = EQUAL;
 17c:	8b e0       	ldi	r24, 0x0B	; 11
				break;
 17e:	08 95       	ret
			}
			break;
			
			// Col3
			case 3:
			switch(rows_val)
 180:	7b 30       	cpi	r23, 0x0B	; 11
 182:	69 f0       	breq	.+26     	; 0x19e <KeyPad_getpressedkey+0xfe>
 184:	7c 30       	cpi	r23, 0x0C	; 12
 186:	18 f4       	brcc	.+6      	; 0x18e <KeyPad_getpressedkey+0xee>
 188:	77 30       	cpi	r23, 0x07	; 7
 18a:	29 f4       	brne	.+10     	; 0x196 <KeyPad_getpressedkey+0xf6>
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <KeyPad_getpressedkey+0x102>
 18e:	7d 30       	cpi	r23, 0x0D	; 13
 190:	21 f0       	breq	.+8      	; 0x19a <KeyPad_getpressedkey+0xfa>
 192:	7e 30       	cpi	r23, 0x0E	; 14
 194:	91 f0       	breq	.+36     	; 0x1ba <KeyPad_getpressedkey+0x11a>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	08 95       	ret
			{
				case 0x0E:
				key = DIVIDE;
				break;
				case 0x0D:
				key = MULTIPLY;
 19a:	8d e0       	ldi	r24, 0x0D	; 13
				break;
 19c:	08 95       	ret
				case 0x0B:
				key =SUBTRACT;
 19e:	8e e0       	ldi	r24, 0x0E	; 14
				break;
 1a0:	08 95       	ret
				case 0x07:
				key = ADD;
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
				break;
 1a4:	08 95       	ret
		SET_BIT(KEYPAD_PORT,(col_index+4));
	}

	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	08 95       	ret

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; 
	unsigned char rows_val = 0;
	unsigned char key = NO_PRESSED_KEY;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	08 95       	ret
			// Col_index = 0
			case 0:
			switch(rows_val)
			{
				case 0x0E:  
				key = 7;
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	08 95       	ret

			case 1:
			switch(rows_val)
			{
				case 0x0E:   
				key = 8;
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	08 95       	ret
			
			case 2:
			switch(rows_val)
			{
				case 0x0E:  
				key = 9;
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	08 95       	ret
			// Col3
			case 3:
			switch(rows_val)
			{
				case 0x0E:
				key = DIVIDE;
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
			default:
			break;
		}
	}
	return key;
}
 1bc:	08 95       	ret

000001be <LCD_SendData>:


void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTA = data;
 1be:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD; // ~(1<<RS_LOC)
 1c0:	c1 98       	cbi	0x18, 1	; 24
	// Set RS to Data
	PORTB = PORTB | 0x04;
 1c2:	c2 9a       	sbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 1c4:	c0 98       	cbi	0x18, 0	; 24
 1c6:	89 ef       	ldi	r24, 0xF9	; 249
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_SendData+0xc>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_SendData+0x12>
 1d0:	00 00       	nop
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 1d2:	c0 9a       	sbi	0x18, 0	; 24
 1d4:	87 ea       	ldi	r24, 0xA7	; 167
 1d6:	91 e6       	ldi	r25, 0x61	; 97
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_SendData+0x1a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_SendData+0x20>
 1de:	00 00       	nop
	
	// Delay to let LCD Display Data
	_delay_ms(100);
}
 1e0:	08 95       	ret

000001e2 <LCD_Send_Command>:


void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 1e2:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 1e4:	c1 98       	cbi	0x18, 1	; 24
	// Set RS to Command
	PORTB = PORTB & 0xFB;
 1e6:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 1e8:	c0 98       	cbi	0x18, 0	; 24
 1ea:	89 ef       	ldi	r24, 0xF9	; 249
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Send_Command+0xc>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Send_Command+0x12>
 1f4:	00 00       	nop
	// Delay
	_delay_ms(1);
	// E to be 15022
	PORTB = PORTB | 0x01;
 1f6:	c0 9a       	sbi	0x18, 0	; 24
 1f8:	87 ea       	ldi	r24, 0xA7	; 167
 1fa:	91 e6       	ldi	r25, 0x61	; 97
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Send_Command+0x1a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Send_Command+0x20>
 202:	00 00       	nop
	
	// Delay to let LCD Execute Command
	_delay_ms(100);
}
 204:	08 95       	ret

00000206 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	// Set Data Port to be OP
	DDRA = 0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 20a:	1b ba       	out	0x1b, r1	; 27

	// Set Control Port to be OP
	DDRB = 0x07;
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	88 bb       	out	0x18, r24	; 24

	// Init LCD
	LCD_Send_Command(0x38); // 8 bit mode
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	e5 df       	rcall	.-54     	; 0x1e2 <LCD_Send_Command>
 218:	8c e0       	ldi	r24, 0x0C	; 12
	// LCD_on
	LCD_Send_Command(0x0C); // turn on LCD
 21a:	e3 cf       	rjmp	.-58     	; 0x1e2 <LCD_Send_Command>

0000021c <LCD_Clear>:
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	e1 cf       	rjmp	.-62     	; 0x1e2 <LCD_Send_Command>

00000220 <LCD_GotoXY>:
}
 220:	66 23       	and	r22, r22

void LCD_Clear(void)
{
	// Send Clr command to LCD
	LCD_Send_Command(0x01);
}
 222:	11 f4       	brne	.+4      	; 0x228 <LCD_GotoXY+0x8>

void LCD_GotoXY(unsigned char x, unsigned char y)
{
	if(y == 0)
	{
		LCD_Send_Command(0x80 + x);
 224:	80 58       	subi	r24, 0x80	; 128
 226:	dd cf       	rjmp	.-70     	; 0x1e2 <LCD_Send_Command>
 228:	80 54       	subi	r24, 0x40	; 64
 22a:	db cf       	rjmp	.-74     	; 0x1e2 <LCD_Send_Command>

0000022c <LCD_SendString>:
	}
	else
	{
		LCD_Send_Command(0x80 + 0x40 + x);
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
 232:	88 81       	ld	r24, Y
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 234:	88 23       	and	r24, r24
 236:	29 f0       	breq	.+10     	; 0x242 <LCD_SendString+0x16>
	{
		LCD_Send_Command(0x80 + 0x40 + x);
	}
}

void LCD_SendString(char *str)
 238:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
 23a:	c1 df       	rcall	.-126    	; 0x1be <LCD_SendData>
 23c:	89 91       	ld	r24, Y+
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 23e:	88 23       	and	r24, r24
 240:	e1 f7       	brne	.-8      	; 0x23a <LCD_SendString+0xe>
 242:	df 91       	pop	r29
	{
		LCD_SendData(*str);
		str++;
	}
}
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <main>:
#include "registersetting.h"
#include "LCD.h"
#include "KeyPad.h"
#include "SevenSeg.h"
int main (void)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <main+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <main+0x8>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
		// Insert application code here, after the board has been initialized.
	CLR_BIT(PORTC,7);
 254:	af 98       	cbi	0x15, 7	; 21
	SET_BIT(PORTC,7);
 256:	af 9a       	sbi	0x15, 7	; 21
	SET_REG_NIBBLE(DDRA);
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a bb       	out	0x1a, r24	; 26
	SET_LOWER_NIBBLE(DDRC);
 25e:	84 b3       	in	r24, 0x14	; 20
 260:	8f 60       	ori	r24, 0x0F	; 15
 262:	84 bb       	out	0x14, r24	; 20
	CLR_LOWER_NIBBLE(PORTC);
 264:	85 b3       	in	r24, 0x15	; 21
 266:	80 7f       	andi	r24, 0xF0	; 240
 268:	85 bb       	out	0x15, r24	; 21
	PORTC=0x80;
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	85 bb       	out	0x15, r24	; 21
	int i=0;
	unsigned char pass[4]={1,2,3,4};
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	8a 83       	std	Y+2, r24	; 0x02
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	8b 83       	std	Y+3, r24	; 0x03
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	8c 83       	std	Y+4, r24	; 0x04
	int n=0;
	unsigned char c;
	LCD_Init();
 27e:	c3 df       	rcall	.-122    	; 0x206 <LCD_Init>
 280:	05 df       	rcall	.-502    	; 0x8c <keypad_init>
	keypad_init();
 282:	0f 2e       	mov	r0, r31
 284:	f0 e6       	ldi	r31, 0x60	; 96
	while(1)
{
	//LCD_Clear();
	// display welcome message 

	LCD_SendString("Welcome Our User ");		 LCD_GotoXY(0,1);
 286:	ef 2e       	mov	r14, r31
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	0f 2e       	mov	r0, r31
 290:	f2 e7       	ldi	r31, 0x72	; 114
	LCD_SendString("    Please       ");	     _delay_ms(100);		LCD_GotoXY(0,1);		
 292:	cf 2e       	mov	r12, r31
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	df 2e       	mov	r13, r31
 298:	f0 2d       	mov	r31, r0
 29a:	0f 2e       	mov	r0, r31
 29c:	f4 e8       	ldi	r31, 0x84	; 132
	LCD_Clear();
	LCD_GotoXY(0,0);
	LCD_SendString("    Enter Your   ");       	 LCD_GotoXY(0,1);
 29e:	af 2e       	mov	r10, r31
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	bf 2e       	mov	r11, r31
 2a4:	f0 2d       	mov	r31, r0
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f6 e9       	ldi	r31, 0x96	; 150
	LCD_SendString("    Password     ");    	 _delay_ms(100);	
 2aa:	8f 2e       	mov	r8, r31
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	9f 2e       	mov	r9, r31
 2b0:	f0 2d       	mov	r31, r0
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f8 ea       	ldi	r31, 0xA8	; 168

	LCD_Clear();

	LCD_SendString("  to access    ");	         LCD_GotoXY(0,1);
 2b6:	6f 2e       	mov	r6, r31
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	7f 2e       	mov	r7, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	0f 2e       	mov	r0, r31
 2c0:	f8 eb       	ldi	r31, 0xB8	; 184
	LCD_SendString("  the switch :) ");		     _delay_ms(100);
 2c2:	4f 2e       	mov	r4, r31
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	5f 2e       	mov	r5, r31
 2c8:	f0 2d       	mov	r31, r0
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f9 ec       	ldi	r31, 0xC9	; 201
	LCD_GotoXY(0,0);	
	LCD_Clear();
	LCD_SendString("pass : ");
 2ce:	2f 2e       	mov	r2, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	3f 2e       	mov	r3, r31
 2d4:	f0 2d       	mov	r31, r0
 2d6:	c7 01       	movw	r24, r14
 2d8:	a9 df       	rcall	.-174    	; 0x22c <LCD_SendString>
	while(1)
{
	//LCD_Clear();
	// display welcome message 

	LCD_SendString("Welcome Our User ");		 LCD_GotoXY(0,1);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	a0 df       	rcall	.-192    	; 0x220 <LCD_GotoXY>
 2e0:	c6 01       	movw	r24, r12
 2e2:	a4 df       	rcall	.-184    	; 0x22c <LCD_SendString>
 2e4:	87 ea       	ldi	r24, 0xA7	; 167
 2e6:	91 e6       	ldi	r25, 0x61	; 97
	LCD_SendString("    Please       ");	     _delay_ms(100);		LCD_GotoXY(0,1);		
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0xa0>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0xa6>
 2ee:	00 00       	nop
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	95 df       	rcall	.-214    	; 0x220 <LCD_GotoXY>
 2f6:	92 df       	rcall	.-220    	; 0x21c <LCD_Clear>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	91 df       	rcall	.-222    	; 0x220 <LCD_GotoXY>
 2fe:	c5 01       	movw	r24, r10
 300:	95 df       	rcall	.-214    	; 0x22c <LCD_SendString>
	LCD_Clear();
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	61 e0       	ldi	r22, 0x01	; 1
	LCD_GotoXY(0,0);
 306:	8c df       	rcall	.-232    	; 0x220 <LCD_GotoXY>
 308:	c4 01       	movw	r24, r8
 30a:	90 df       	rcall	.-224    	; 0x22c <LCD_SendString>
 30c:	a7 ea       	ldi	r26, 0xA7	; 167
	LCD_SendString("    Enter Your   ");       	 LCD_GotoXY(0,1);
 30e:	b1 e6       	ldi	r27, 0x61	; 97
 310:	11 97       	sbiw	r26, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0xc8>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xce>
 316:	00 00       	nop
 318:	81 df       	rcall	.-254    	; 0x21c <LCD_Clear>
 31a:	c3 01       	movw	r24, r6
	LCD_SendString("    Password     ");    	 _delay_ms(100);	
 31c:	87 df       	rcall	.-242    	; 0x22c <LCD_SendString>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	7e df       	rcall	.-260    	; 0x220 <LCD_GotoXY>
 324:	c2 01       	movw	r24, r4
 326:	82 df       	rcall	.-252    	; 0x22c <LCD_SendString>
 328:	87 ea       	ldi	r24, 0xA7	; 167
 32a:	91 e6       	ldi	r25, 0x61	; 97
 32c:	01 97       	sbiw	r24, 0x01	; 1

	LCD_Clear();
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0xe4>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0xea>

	LCD_SendString("  to access    ");	         LCD_GotoXY(0,1);
 332:	00 00       	nop
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	73 df       	rcall	.-282    	; 0x220 <LCD_GotoXY>
 33a:	70 df       	rcall	.-288    	; 0x21c <LCD_Clear>
 33c:	c1 01       	movw	r24, r2
 33e:	76 df       	rcall	.-276    	; 0x22c <LCD_SendString>
	LCD_SendString("  the switch :) ");		     _delay_ms(100);
 340:	00 e0       	ldi	r16, 0x00	; 0
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	ad de       	rcall	.-678    	; 0xa0 <KeyPad_getpressedkey>
 346:	e1 e0       	ldi	r30, 0x01	; 1
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ec 0f       	add	r30, r28
 34c:	fd 1f       	adc	r31, r29
 34e:	e0 0f       	add	r30, r16
 350:	f1 1f       	adc	r31, r17
	LCD_GotoXY(0,0);	
 352:	98 2f       	mov	r25, r24
 354:	90 5d       	subi	r25, 0xD0	; 208
 356:	90 83       	st	Z, r25
 358:	8a 30       	cpi	r24, 0x0A	; 10
	LCD_Clear();
 35a:	18 f4       	brcc	.+6      	; 0x362 <main+0x11a>
 35c:	8a e2       	ldi	r24, 0x2A	; 42
	LCD_SendString("pass : ");
 35e:	2f df       	rcall	.-418    	; 0x1be <LCD_SendData>
 360:	02 c0       	rjmp	.+4      	; 0x366 <main+0x11e>
 362:	01 50       	subi	r16, 0x01	; 1
	// take and check password 
	int j=0;
	for (i=0;i<4;i++){
 364:	10 40       	sbci	r17, 0x00	; 0
 366:	0f 5f       	subi	r16, 0xFF	; 255
		pass[i]=KeyPad_getpressedkey()+'0';
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	04 30       	cpi	r16, 0x04	; 4
 36c:	11 05       	cpc	r17, r1
 36e:	54 f3       	brlt	.-44     	; 0x344 <main+0xfc>
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	81 33       	cpi	r24, 0x31	; 49
 374:	09 f0       	breq	.+2      	; 0x378 <main+0x130>
 376:	3d c0       	rjmp	.+122    	; 0x3f2 <main+0x1aa>
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	82 33       	cpi	r24, 0x32	; 50
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0x138>
		c=pass[i];
		if(c=='1'|| c=='2'|| c=='3'|| c=='4' ||c=='5'|| c=='6'|| c=='7'|| c=='8'|| c=='9'||c=='0'){
 37e:	39 c0       	rjmp	.+114    	; 0x3f2 <main+0x1aa>
 380:	8b 81       	ldd	r24, Y+3	; 0x03
			LCD_SendData('*');}
 382:	83 33       	cpi	r24, 0x33	; 51
 384:	b1 f5       	brne	.+108    	; 0x3f2 <main+0x1aa>
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	84 33       	cpi	r24, 0x34	; 52
		else{
			i--;}
 38a:	99 f5       	brne	.+102    	; 0x3f2 <main+0x1aa>
 38c:	47 df       	rcall	.-370    	; 0x21c <LCD_Clear>
	LCD_GotoXY(0,0);	
	LCD_Clear();
	LCD_SendString("pass : ");
	// take and check password 
	int j=0;
	for (i=0;i<4;i++){
 38e:	81 ed       	ldi	r24, 0xD1	; 209
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	4c df       	rcall	.-360    	; 0x22c <LCD_SendString>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	61 e0       	ldi	r22, 0x01	; 1
		if(c=='1'|| c=='2'|| c=='3'|| c=='4' ||c=='5'|| c=='6'|| c=='7'|| c=='8'|| c=='9'||c=='0'){
			LCD_SendData('*');}
		else{
			i--;}
			}
	if (pass[0]=='1' && pass[1]=='2' && pass[2]=='3' && pass[3]=='4'){
 398:	43 df       	rcall	.-378    	; 0x220 <LCD_GotoXY>
 39a:	81 ee       	ldi	r24, 0xE1	; 225
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	46 df       	rcall	.-372    	; 0x22c <LCD_SendString>
 3a0:	4f e3       	ldi	r20, 0x3F	; 63
 3a2:	5d e0       	ldi	r21, 0x0D	; 13
 3a4:	63 e0       	ldi	r22, 0x03	; 3
 3a6:	41 50       	subi	r20, 0x01	; 1
 3a8:	50 40       	sbci	r21, 0x00	; 0
 3aa:	60 40       	sbci	r22, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x15e>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x168>
 3b0:	00 00       	nop
 3b2:	9f 9b       	sbis	0x13, 7	; 19
		LCD_Clear();
 3b4:	13 c0       	rjmp	.+38     	; 0x3dc <main+0x194>
 3b6:	18 c0       	rjmp	.+48     	; 0x3e8 <main+0x1a0>
		LCD_SendString(" your password ");		LCD_GotoXY(0,1);
 3b8:	85 bb       	out	0x15, r24	; 21
 3ba:	4f e9       	ldi	r20, 0x9F	; 159
 3bc:	56 e8       	ldi	r21, 0x86	; 134
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	41 50       	subi	r20, 0x01	; 1
 3c2:	50 40       	sbci	r21, 0x00	; 0
 3c4:	60 40       	sbci	r22, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x178>
		LCD_SendString(" is correct");			_delay_ms(1000);
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x182>
 3ca:	00 00       	nop
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	8a 30       	cpi	r24, 0x0A	; 10
 3d0:	99 f7       	brne	.-26     	; 0x3b8 <main+0x170>
 3d2:	95 bb       	out	0x15, r25	; 21
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	30 40       	sbci	r19, 0x00	; 0
 3d8:	21 f4       	brne	.+8      	; 0x3e2 <main+0x19a>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <main+0x19e>
 3dc:	23 e0       	ldi	r18, 0x03	; 3
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
		
		int i,b1=0,j;
		if( GET_BIT(PINC,7) == 0 && b1==0 ){
 3e2:	89 2f       	mov	r24, r25
 3e4:	e9 cf       	rjmp	.-46     	; 0x3b8 <main+0x170>
 3e6:	83 b3       	in	r24, 0x13	; 19
			b1=1;
			for (j=0;j<3;j++)
			{
			for(i=0;i<10;i++){
				PORTC=i;
 3e8:	19 df       	rcall	.-462    	; 0x21c <LCD_Clear>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	18 df       	rcall	.-464    	; 0x220 <LCD_GotoXY>
 3f0:	72 cf       	rjmp	.-284    	; 0x2d6 <main+0x8e>
 3f2:	14 df       	rcall	.-472    	; 0x21c <LCD_Clear>
 3f4:	8d ee       	ldi	r24, 0xED	; 237
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	19 df       	rcall	.-462    	; 0x22c <LCD_SendString>
 3fa:	6f e9       	ldi	r22, 0x9F	; 159
 3fc:	76 e8       	ldi	r23, 0x86	; 134
		int i,b1=0,j;
		if( GET_BIT(PINC,7) == 0 && b1==0 ){
			b1=1;
			for (j=0;j<3;j++)
			{
			for(i=0;i<10;i++){
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	61 50       	subi	r22, 0x01	; 1
				PORTC=i;
				_delay_ms(500);
				}
			PORTC=0x00;}
 402:	70 40       	sbci	r23, 0x00	; 0
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <main+0x1b8>
		LCD_SendString(" is correct");			_delay_ms(1000);
		
		int i,b1=0,j;
		if( GET_BIT(PINC,7) == 0 && b1==0 ){
			b1=1;
			for (j=0;j<3;j++)
 408:	00 c0       	rjmp	.+0      	; 0x40a <main+0x1c2>
 40a:	00 00       	nop
		LCD_Clear();
		LCD_SendString(" your password ");		LCD_GotoXY(0,1);
		LCD_SendString(" is correct");			_delay_ms(1000);
		
		int i,b1=0,j;
		if( GET_BIT(PINC,7) == 0 && b1==0 ){
 40c:	8c ef       	ldi	r24, 0xFC	; 252
 40e:	90 e0       	ldi	r25, 0x00	; 0
	LCD_GotoXY(0,0);	
	LCD_Clear();
	LCD_SendString("pass : ");
	// take and check password 
	int j=0;
	for (i=0;i<4;i++){
 410:	0d df       	rcall	.-486    	; 0x22c <LCD_SendString>
 412:	8f e9       	ldi	r24, 0x9F	; 159
 414:	96 e8       	ldi	r25, 0x86	; 134
			for(i=0;i<10;i++){
				PORTC=i;
				_delay_ms(500);
				}
			PORTC=0x00;}
		if(GET_BIT(PINC,7)==1){
 416:	a1 e0       	ldi	r26, 0x01	; 1
			b1=0;}
			}
			LCD_Clear();/*
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	90 40       	sbci	r25, 0x00	; 0
		LCD_GotoXY(0,0);
		LCD_SendString("                ");
		LCD_GotoXY(0,1);
		LCD_SendString("                ");*/
		LCD_GotoXY(0,0);
 41c:	a0 40       	sbci	r26, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <main+0x1d0>
 420:	00 c0       	rjmp	.+0      	; 0x422 <main+0x1da>
 422:	00 00       	nop
		if(c=='1'|| c=='2'|| c=='3'|| c=='4' ||c=='5'|| c=='6'|| c=='7'|| c=='8'|| c=='9'||c=='0'){
			LCD_SendData('*');}
		else{
			i--;}
			}
	if (pass[0]=='1' && pass[1]=='2' && pass[2]=='3' && pass[3]=='4'){
 424:	80 e0       	ldi	r24, 0x00	; 0
		LCD_SendString("                ");*/
		LCD_GotoXY(0,0);
		}
	
	else{
		LCD_Clear();
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	fb de       	rcall	.-522    	; 0x220 <LCD_GotoXY>
		LCD_SendString("Wrong Password");	
 42a:	55 cf       	rjmp	.-342    	; 0x2d6 <main+0x8e>

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
